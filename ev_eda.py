# -*- coding: utf-8 -*-
"""EV EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1554K1wm2ARzj_52KaEIuTcivS2fenmtv

The aim of this analysis is to find out the key performance-related differences between budget and high-end electric vehicles?

## **Import Libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns
from google.colab import files
from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# change directory
# %cd /content/drive/MyDrive/Colab Notebooks//INST 414/Assignments/Module 1

!ls

"""## **Load & Explore Data**"""

# Loading data
ev_df = pd.read_csv('ElectricCarData_Norm.csv')
ev_df.head(10)

# Getting info from dataframe
print(ev_df.info())
print(ev_df.shape)
print(ev_df.duplicated().sum())

"""## **Data Cleaning**"""

# Remove rows containing '-' in 'FastCharge' column
print(ev_df['FastCharge'].unique())
ev_df = ev_df[ev_df.FastCharge != '-']

# Clean 'Accel' column: remove 'sec' and convert to float
ev_df['Accel'] = ev_df['Accel'].str.replace(' sec', '', regex=False)
ev_df['Accel'] = ev_df['Accel'].astype(float)

# Clean 'TopSpeed' column: remove 'km/h' and convert to int
ev_df['TopSpeed'] = ev_df['TopSpeed'].str.replace(' km/h', '', regex=False)
ev_df['TopSpeed'] = ev_df['TopSpeed'].astype(int)

# Clean'Range' column: remove 'km' and convert to int
ev_df['Range'] = ev_df['Range'].str.replace(' km', '', regex=False)
ev_df['Range'] = ev_df['Range'].astype(int)

# Clean 'Efficiency' column: remove 'Wh/km' and convert to int
ev_df['Efficiency'] = ev_df['Efficiency'].str.replace(' Wh/km', '', regex=False)
ev_df['Efficiency'] = ev_df['Efficiency'].astype(int)

# Clean 'FastCharge' column: remove 'Wh/km' and convert to int
ev_df['FastCharge'] = ev_df['FastCharge'].str.replace(' km/h', '', regex=False)
ev_df['FastCharge'] = ev_df['FastCharge'].astype(int)

"""Some of the numerical columns are listed as object data types due to the metric units added. I removed the units and converted the columns to the appropriate the data type."""

# Renaming columns
ev_df = ev_df.rename(columns={'Accel': 'Accel(sec)', 'TopSpeed': 'TopSpeed(km/h)', 'Range': 'Range(km)', 'Efficiency': 'Efficiency(Wh/km)', 'FastCharge': 'FastCharge(km/h)'})

# Check cleaned data
print(ev_df.info())
ev_df.head(10)

"""## **Visualizations**"""

# Correlation Heatmap
plt.figure(figsize=(8, 5))
corr = ev_df.corr(numeric_only=True)
sns.heatmap(corr, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap EV Features')
plt.show()

# Histogram: price distribution of EVs
plt.figure(figsize=(8, 5))
sns.histplot(ev_df['PriceEuro'], bins=15, kde=True, color='skyblue')
plt.xlabel('Price (Euro)')
plt.ylabel('Frequency')
plt.title('Distribution of Electric Car Prices (Euro)')
plt.show()

"""The histogram of 'PriceEuro' provides a clear overview of how EV prices are distributed in our dataset. The right skew in the histogram indicates that while most EVs are moderately priced, there are a few models that push the upper end of the scale."""

# Scatterplot: Price vs. Top Speed
plt.figure(figsize=(9, 5))
sns.scatterplot(x='TopSpeed(km/h)', y='PriceEuro', hue='Segment', data=ev_df, alpha=0.7)
plt.xlabel('Top Speed (km/h)')
plt.ylabel('Price (Euro)')
plt.title('Price vs. Top Speed')
plt.show()

"""Analysis shows strong positive correlation (0.82) between PriceEuro and TopSpeed. The scatterplot ilustrates that cheaper EVs usually have lower top speeds compared to the more expensive models."""

# Scatterplot: Price vs. Acceleration
plt.figure(figsize=(8, 5))
sns.scatterplot(x='Accel(sec)', y='PriceEuro', hue='Segment', data=ev_df, alpha=0.7)
plt.xlabel('Acceleration Time (sec)')
plt.ylabel('Price (Euro)')
plt.title('Price vs. Acceleration Time')
plt.show()

"""Analysis shows a strong negative correlation (â€“0.68) between PriceEuro and Accel. The scatteplot indicates that EVs with higher prices tend to have lower acceleration times; meaning they accelerate faster."""

# Scatterplot: Price vs. Range
plt.figure(figsize=(8,5))
sns.scatterplot(x='Range(km)', y='PriceEuro', hue="Segment", data=ev_df, alpha=0.7)
plt.title('Price vs. Range')
plt.xlabel('Range (km)')
plt.ylabel('Price (Euro)')
plt.show()

"""A moderate positive correlation (0.66) between PriceEuro and Range implies that the more expensive EVS tend to offer longer ranges."""

# Boxplot: PriceEuro by Segment
segments = ev_df['Segment'].unique()
data_to_plot = [ev_df[ev_df['Segment'] == seg]['PriceEuro'] for seg in segments]

plt.figure(figsize=(10, 5))
plt.boxplot(data_to_plot, labels=segments)
plt.xlabel('Car Segment')
plt.ylabel('Price (Euro)')
plt.title('Boxplot of Price by Car Segment')
plt.show()

"""Segments that typically include luxury models exhibit higher median prices and a wider range of values, suggesting that these categories include some premium vehicles with advanced features. Conversely, segments that line up with the more compact EVs show lower median prices and tighter price distributions."""

# Boxplot: PriceEuro by Brand
brands = ev_df['Brand'].unique()
data_to_plot = [ev_df[ev_df['Brand'] == car]['PriceEuro'] for car in brands]

plt.figure(figsize=(29, 7))
plt.boxplot(data_to_plot, labels=brands)
plt.xlabel('Car Brand')
plt.ylabel('Price (Euro)')
plt.title('Boxplot of Price by Car Brand')
plt.show()

"""## **Handling Outliers**"""

ev_df.describe()

print(ev_df['Accel(sec)'].quantile(0.99))
print(ev_df['TopSpeed(km/h)'].quantile(0.99))
print(ev_df['Range(km)'].quantile(0.99))
print(ev_df['Efficiency(Wh/km)'].quantile(0.99))
print(ev_df['FastCharge(km/h)'].quantile(0.99))
print(ev_df['PriceEuro'].quantile(0.99))

"""I decided not to remove outliers in TopSpeed and PriceEuro because these extreme values capture important differences between budget and premium electric vehicles.

## **Feature Engineering**
"""

# Create new column 'PriceCategory' that labels each EV as 'Budget' or 'Premium'
price_limit = ev_df['PriceEuro'].median()
ev_df['PriceCategory'] = np.where(ev_df['PriceEuro'] <= price_limit, 'Budget', 'Premium')

ev_df[['PriceEuro', 'PriceCategory']].head(10)

"""I split the dataset into 'Budget' and 'Premium' EVs using the median PriceEuro as the threshold. This creates two groups, which allows me to compare the performance and feature differences between more affordable and high-end vehicles.

## **Conclusion**

High-end EVs are priced higher and deliver faster acceleration, higher top speeds, and longer ranges.  In our data, we saw a strong positive correlation between price and top speed (0.82) and a notable negative correlation between price and acceleration (-0.68), indicating that as EVs get more expensive, they tend to offer significantly better performance in these areas. Budget EVs tend to be more modest in these performance areas, though they might be made for better energy efficiency and affordability.
"""

